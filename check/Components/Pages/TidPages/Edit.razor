@page "/tids/edit"
@using Microsoft.EntityFrameworkCore
@using check.Models
@inject IDbContextFactory<check.Data.checkContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Tid</h2>
<hr />
@if (Tid is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Tid" OnValidSubmit="UpdateTid" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Tid.Id" value="@Tid.Id" />
                <div class="mb-3">
                    <label for="userId" class="form-label">Användare:</label>
                    <InputText id="userId" @bind-Value="Tid.UserId" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Tid.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rubrik" class="form-label">Rubrik:</label>
                    <InputText id="rubrik" @bind-Value="Tid.Rubrik" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Tid.Rubrik" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="beskrivning" class="form-label">Beskrivning:</label>
                    <InputText id="beskrivning" @bind-Value="Tid.Beskrivning" class="form-control" />
                    <ValidationMessage For="() => Tid.Beskrivning" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="timmar" class="form-label">Timmar:</label>
                    <InputNumber id="timmar" @bind-Value="Tid.Timmar" class="form-control" />
                    <ValidationMessage For="() => Tid.Timmar" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="minuter" class="form-label">Minuter:</label>
                    <InputNumber id="minuter" @bind-Value="Tid.Minuter" class="form-control" />
                    <ValidationMessage For="() => Tid.Minuter" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datum" class="form-label">Datum:</label>
                    <InputDate id="datum" @bind-Value="Tid.Datum" class="form-control" />
                    <ValidationMessage For="() => Tid.Datum" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/tids">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Tid? Tid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Tid ??= await context.Tid.FirstOrDefaultAsync(m => m.Id == Id);

        if (Tid is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTid()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Tid!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TidExists(Tid!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/tids");
    }

    private bool TidExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Tid.Any(e => e.Id == id);
    }
}
